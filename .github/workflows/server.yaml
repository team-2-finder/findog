name: server

on:
  push:
    branches: [ main ]

  pull_request:
    branches: [ main ]

  merge_group:
      branches: [ main ]

jobs:
  server-build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: admin
          POSTGRES_USER: admin
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3

    - name: Setting up rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        components: clippy, rustfmt
      
    - name: Set up cargo cache
      uses: actions/cache@v3
      continue-on-error: false
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          server/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('server/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-

    - name: Checking if it builds without errors (default feature)
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: --all-targets --manifest-path server/Cargo.toml -- -D warnings

    - name: Checking if code is formatted
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all --manifest-path server/Cargo.toml -- --check
    
    - name: Testing code without errors (default feature)
      uses: actions-rs/cargo@v1
      env:
        DATABASE_URL: postgres://admin:admin@localhost:5432/postgres
      with:
        command: test
        args: --manifest-path server/Cargo.toml

    # - name: Generate code coverage
    #   run: |
    #     cargo install cargo-tarpaulin || true
    #     cargo tarpaulin --manifest-path server/Cargo.toml --verbose --workspace --timeout 120 --out Xml --run-types Tests

    # - name: Upload coverage reports to Codecov
    #   uses: codecov/codecov-action@v3
    #   env:
    #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
